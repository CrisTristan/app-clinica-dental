// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id        String   @id
  desc      String?
  startDate DateTime
  endDate   DateTime
  name      Patient  @relation(fields: [nameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  nameId    Int
}

model Patient {
  id           Int           @id @default(autoincrement())
  name         String        
  apellido_pat String?
  apellido_mat String?
  telefono     String       @unique
  edad         Int?
  domicilio    String?
  sexo         Gender?
  Appointment  Appointment[]
  teethState   Teeth?
}

enum Gender {
  Male
  Female
}

enum Role {
  user
  admin
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role        @default(user)
  accounts      Account[]
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Teeth {
  id      Int      @id @default(autoincrement())
  teethState   Json
  name      Patient  @relation(fields: [nameId], references: [id])
  nameId    Int @unique
}